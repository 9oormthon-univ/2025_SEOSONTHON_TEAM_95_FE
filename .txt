view : 현재 어떤 화면인지 구분 
form: URL/ 기사 텍스트 / 업로드 이미지 저장 
result: 분석 결과 저장 
runAnalyze() : 실행하면 로딩 -> 결과 화면으로 전환
reset() -> 다시 초기화 

//InitView.jsx
리액트 훅 중 하나/ 컴포넌트가 화면에 나타나거나 업데이트 될 때 실행되는 코드를 넣는 곳 

전체 플로우

초기화면 – InitView

보여주는 것: 상단바(브랜드/게시판), KPI 4개, 카테고리 그래프, (파일 업로드 섹션 있으면 미리보기)

주요 동작

파일 선택 → setForm({ ...form, file })

검사하기 클릭 → onSubmit(form) 호출

검사 실행 – App.runAnalyze()

setView("loading") → 로딩화면으로 전환

analyzeMock(form) 호출 (지금은 더미 API)

성공 → setResult(data) 후 setView("result")

실패(throw) → setErrorMsg(...) 후 setView("error")

로딩화면 – LoadingView

props: file, onCancel

보여주는 것: 썸네일/파일명, 진행바(0→85%), 단계 리스트(업로드/분석/신뢰도/리포트)

자동 동작: 진행률 타이머로 85%까지 증가(결과 오면 앱이 result로 넘김)

버튼

Cancel → onCancel() 호출 → 보통 App.reset()으로 초기화면 복귀

결과화면 – ResultView

props: data, onRetry, onGoBoard

보여주는 것: 일치도/AI 의심 점수(KPI 카드), 세부 막대

버튼

다시 검사 → onRetry() → App.reset() → 초기화면

게시판 보기 → onGoBoard() → setView("board")

에러화면 – ErrorView

언제 뜨나: runAnalyze()의 catch에서

props: message, onBack, onRetry

버튼

뒤로가기 → onBack() → 초기화면

다시 시도 → onRetry() → runAnalyze() 재호출

게시판 – BoardView

props: onBack

보여주는 것: 최근 검사 목록(MOCK)

버튼

돌아가기 → 초기화면

상태(State) 요약 (App.jsx)

view : "init" | "loading" | "result" | "error" | "board"

form : { url: string, text: string, file: File|null }

result : 분석 결과 객체(일치도/의심 점수 등)

errorMsg : 에러 화면 문구

화면 전환 흐름(한 줄 버전)

InitView(검사하기) → setView("loading") → analyzeMock
→ 성공: setResult → setView("result")
→ 실패: setErrorMsg → setView("error")

LoadingView(Cancel) → reset() → InitView

ResultView(다시 검사) → reset() → InitView
ResultView(게시판) → setView("board") → BoardView

ErrorView(뒤로가기) → InitView
ErrorView(다시 시도) → runAnalyze() 재호출

데이터 흐름 요약

파일 선택(InitView) → form.file 저장

runAnalyze(form) → (지금은) analyzeMock(form) → 결과 객체 반환

결과는 ResultView에 data로 전달되어 렌더